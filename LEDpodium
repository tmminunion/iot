#include <Adafruit_NeoPixel.h>
#include <math.h>

// --- Konfigurasi LED ---
#define LED_PIN     5
#define LED_COUNT   160


Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

// --- Setup awal ---
void setup() {
 

  strip.begin();
  strip.show();            
  strip.setBrightness(100);
}

// --- Fungsi utama loop ---
void loop() {
 staranime();

  delay(100);
}

// --- Fungsi animasi utama ---
void staranime() {
  
  runNING3LEDs(strip.Color(255, 255, 0), 100); // Hijau jalan
   meteorRain(strip.Color(255, 255, 0), 10, 64, true, 2);
  trainEffect(strip.Color(0, 0, 255), strip.Color(255, 255, 0), 10, 10, 50);
  meteorRain(strip.Color(255, 255, 0), 15, 64, true, 15);
   meteorRain(strip.Color(255, 255, 0), 10, 64, true, 2);
  run3LEDs(strip.Color(255, 255, 0), 100); // Hijau jalan
   meteorRain(strip.Color(255, 255, 0), 10, 64, true, 2);
  waveEffect(strip.Color(255, 255, 0), 80);
 meteorRain(strip.Color(255, 255, 0), 6, 64, true, 5);
  rainbowCycle(10);
  meteorRain(strip.Color(255, 255, 0), 6, 64, true, 5);
  delay(1000);
}


// --- Animasi 1: 3 LED berjalan ---
void runNING3LEDs(uint32_t color, int delayTime) {
  strip.clear();
  for (int i = 0; i < LED_COUNT; i++) {
    strip.setPixelColor(i, color);  // Biru
    strip.show();
    delay(100); // jeda antar LED
  }
}
// --- Animasi 1: 3 LED berjalan ---
void run3LEDs(uint32_t color, int delayTime) {
  for (int i = 0; i < LED_COUNT - 2; i++) {
    strip.clear();
    strip.setPixelColor(i, color);
    strip.setPixelColor(i + 1, color);
    strip.setPixelColor(i + 2, color);
    strip.show();
    delay(delayTime);
  }
}

// --- Animasi 2: Rainbow Cycle ---
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;
  for (j = 0; j < 256; j++) {
    for (i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// --- Animasi 3: Gelombang ---
void waveEffect(uint32_t color, int delayTime) {
  float waveSpeed = millis() / 100.0;

  for (int i = 0; i < LED_COUNT; i++) {
    float value = sin((i * 0.3) + waveSpeed);
    int brightness = (value + 1.0) * 127.5;
    strip.setPixelColor(i, scaleColor(color, brightness));
  }
  strip.show();
  delay(delayTime);
}

// --- Util: Roda warna ---
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85) return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  if (WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

// --- Util: Skalakan warna berdasarkan brightness ---
uint32_t scaleColor(uint32_t color, uint8_t scale) {
  uint8_t r = (uint8_t)(color >> 16 & 0xFF);
  uint8_t g = (uint8_t)(color >> 8 & 0xFF);
  uint8_t b = (uint8_t)(color & 0xFF);
  return strip.Color((r * scale) / 255, (g * scale) / 255, (b * scale) / 255);
}

void trainEffect(uint32_t baseColor, uint32_t trainColor, uint8_t trainLength, uint8_t spaceLength, int speedDelay) {
  int totalCycle = trainLength + spaceLength;

  for (int offset = 0; offset < LED_COUNT + totalCycle; offset++) {
    for (int i = 0; i < LED_COUNT; i++) {
      int relativePos = (i - offset) % totalCycle;
      if (relativePos < 0) relativePos += totalCycle;

      if (relativePos < trainLength) {
        strip.setPixelColor(i, trainColor); // bagian kereta (kuning)
      } else {
        strip.setPixelColor(i, baseColor);  // bagian jeda (biru)
      }
    }

    strip.show();
    delay(speedDelay);
  }
}

// --- Animasi: Meteor ---
void meteorRain(uint32_t color, uint8_t meteorSize, uint8_t meteorTrailDecay, boolean randomDecay, int speedDelay) {
  strip.clear();

  for (int i = 0; i < LED_COUNT * 2; i++) {
    for (int j = 0; j < LED_COUNT; j++) {
      if ((!randomDecay) || (random(10) > 5)) {
        uint32_t oldColor = strip.getPixelColor(j);
        uint8_t r = (uint8_t)(oldColor >> 16);
        uint8_t g = (uint8_t)(oldColor >> 8);
        uint8_t b = (uint8_t)(oldColor);

        r = (r <= 10) ? 0 : r - (r * meteorTrailDecay / 256);
        g = (g <= 10) ? 0 : g - (g * meteorTrailDecay / 256);
        b = (b <= 10) ? 0 : b - (b * meteorTrailDecay / 256);

        strip.setPixelColor(j, strip.Color(r, g, b));
      }
    }

    for (int j = 0; j < meteorSize; j++) {
      int pos = i - j;
      if (pos >= 0 && pos < LED_COUNT) {
        strip.setPixelColor(pos, color);
      }
    }

    strip.show();
    delay(speedDelay);
  }
}
